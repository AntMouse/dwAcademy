1. 주문목록 기능 만들기. 상품 목록이랑 동일한 양식 사용.
단, order클래스는 특정 필드를 추가하거나 기존 필드 이름을 수정해선 안 된다.

1-1. 백엔드 코드 구축하기(완료).

1-2. 주문번호 / 상품명 / 총가격 / 주문상태 (배송완료/배송준비 두단계에따라 리스트보기) / 상세정보(완료).

1-3. 상품명은 상품이 1개이면 해당 상품 이름, 2개 이상이면 대표 상품 외 X개 이런 식으로 표시(완료).

1-4. orderuser, orderadmin 체크(완료).

1-5. 주문목록(시간순서)대로 정렬 하기. 먼저 주문한 게 위로 온다. 
10시, 11시 각각 주문이면 10시 주문이 위(완료).

1-6. 정렬하기 기능 + 검색 기능 둘 다 추가. 검색은 주문 번호로(완료).

1-7. 체크 박스 기능 넣기. 일괄 삭제 가능하게(완료).

1-8. 동일한 상품을 담으면 같은 상품이 2개가 나오지 않고, 수량만 1개 늘리면 된다(완료).

1-9. 표에서 상세정보 칼럼 관리로 바꾸기. 상세정보/주문완료 선택 가능(다른 기능으로 대체).

1-10. 페이징 기능에서 검색 결과에 따라 아래 숫자 수정. 안 나올 수도 있음(완료).

1-11.
주문 정보에서 주문자, 연락처, 휴대폰 3개는 주문을 회원의 정보이다.
따라서 백엔드에서도 해당 회원에게 접근해서 회원의 자료를 뽑아오면 된다.
그 아래에 수취인은 위의 3개와는 별개이다. 대부분 동일하겠지만 수취인 관련
정보는 회원이 직접 입력을 한다. 따라서 둘이 다를 때도 있다.
수취인 관련 정보는 order 클래스에서 
    private String recipientName; // 수취인 정보
    private String contactNumber; // 전화번호
    private String deliveryLocation; // 배송지
이거 3개를 사용해서 사용자에게 출력하면 된다.

상세 정보에서 아래에
상품
상품명 : 가격 / 개수 / 각 토탈 가격
요청사항
요청사항 내용

주문 총 가격
이런 식으로 나오게 하면 된다.

1-12. 표 상단에 배송완료/배송준비 버튼 만들어서 체크 박스를 이용해서 
일괄 처리할 수 있게 기능 만들기(완료).



2. 지금까지 한 프론트엔드 파일에서 클래스 이름 전부 수정. 앞에 소스 파일 이름 붙이기.
className = "product-list-container" 이런 식으로.
이렇게 해야 다른 css 영향 안 받고, App.js 에서 css 영향 안 받고, 이름 안 겹처서 오류 줄어듦.
api에서 enum의 displayname 값을 나오도록 수정.