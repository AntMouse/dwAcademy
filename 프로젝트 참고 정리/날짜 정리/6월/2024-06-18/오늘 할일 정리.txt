1. 주문목록 기능 만들기. 상품 목록이랑 동일한 양식 사용.
단, order클래스는 특정 필드를 추가하거나 기존 필드 이름을 수정해선 안 된다.

1-1. (완료)
주문 정보에서 주문자, 연락처, 휴대폰 3개는 주문을 회원의 정보이다.
따라서 백엔드에서도 해당 회원에게 접근해서 회원의 자료를 뽑아오면 된다.
그 아래에 수취인은 위의 3개와는 별개이다. 대부분 동일하겠지만 수취인 관련
정보는 회원이 직접 입력을 한다. 따라서 둘이 다를 때도 있다.
수취인 관련 정보는 order 클래스에서 
    private String recipientName; // 수취인 정보
    private String contactNumber; // 전화번호
    private String deliveryLocation; // 배송지
이거 3개를 사용해서 사용자에게 출력하면 된다.
오더유틸,오더핸들러,오더리스트페이지
상세 정보에서 아래에
상품
상품명 : 가격 / 개수 / 각 토탈 가격
요청사항
요청사항 내용
│
주문 총 가격
이런 식으로 나오게 하면 된다.

1-2. 주문 정보 양식 정하기. 상품은 표로 나오게 하기. 칼럼은 상품명, 가격, 수량. 그 아래에 데이터 뿌리기.
이때 세로선은 안 보이게 설정. 가로선도 없어도 되고, 그냥 흰색, 회색으로 나오게 해도 상관 없음.

1-3. 주문 목록 배치 수정(통합할 때 해야 되므로 여기선 하지 않는다).

2. 리뷰 기능 틀 만들기.

2-1.. 회원, 주문, 상품 관리자 페이지 정리하기. 겹치는 부분 합치고, css 수정
(통합할 때 해야 되므로 여기선 하지 않는다).

2-2.. 특정 상품에 대한 리뷰 1개를 볼 때, 여러 개를 볼 때. 특정 회원이 작성한 리뷰 1개를 볼 때, 여러 개를
볼 때. 리뷰를 한 번에 1개 삭제하는 것과 한 번에 2개 이상을 한꺼번에 삭제. 모든 리뷰를 보는 기능.

3. 지금까지 한 프론트엔드 파일에서 클래스 이름 전부 수정. 앞에 소스 파일 이름 붙이기.
className = "product-list-container" 이런 식으로.
이렇게 해야 다른 css 영향 안 받고, App.js 에서 css 영향 안 받고, 이름 안 겹처서 오류 줄어듦.
api에서 enum의 displayname 값을 나오도록 수정.