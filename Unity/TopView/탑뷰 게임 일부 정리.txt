P   ->   E = E – P
E   ->   P = P – E

플레이어(P)가 적(E)에게 향하는 방향은 적(E) 빼기 플레이어(P).
아래는 플레이어가 적한테 피격 당하면 그 반대 방향으로 밀려나는 코드(일반적인 게임에서도 저런 현상 일어남. ex 메이플).

//적 캐릭터의 반대 방향으로 히트백 
Vector3 toPos = (transform.position - enemy.transform.position).normalized;
rbody.AddForce(new Vector2(toPos.x * 4, toPos.y * 4), ForceMode2D.Impulse);

normalized : 다른 값은 보지 않고 방향만 보겠다. 위에서도 그 용도로 사용.

Quaternion : 각 축을 따로따로 연동해서 계산. 사원수로, 복소수를 확장한 일종의 4차원 벡터. 겹치면 분리가 안 돼서. 회전하기 위해 사용. 회전 각 값 얻기.

identity : 회전이 없다.

Quaternion.identity는 회전을 나타내며, 여기서는 회전을 적용하지 않고 원래의 회전을 유지합니다.

PlayerPrefs.GetInt("Keys"); >> Key, Value 쌍으로 값을 저장. 자바의 Map이랑 비슷. Get이니 값을 가져옴.

Vector2 pos = Vector2.Lerp(player.transform.position,
otherTarget.transform.position, 0.5f);
//플레이어 위치와 연동
transform.position = new Vector3(pos.x, pos.y, -10);

Lerp(A, B, int) 이건 A와 B 사이의 거리를 반환한다. int에는 0~1사이의 값이 들어감. 0에 가까울수록 A에 가깝고, 1에 가까울수록 B에 가깝다. 0.2면 A에 가까운 값이 나오고 0.8이면 B에 가까운 값이 나온다. 만약 카메라 위치를 이동할 때 저걸 쓸 때, int에 0.5를 쓰면 A와 B의 정확히 가운데를 카메라로 보여준다.

Instantiate 함수는 Unity에서 새로운 게임 오브젝트를 생성하는 데 사용되는 함수입니다.
public static Object Instantiate(Object original, Vector3 position, Quaternion rotation);
original: 새로 생성할 게임 오브젝트의 원본을 나타냅니다. 이는 보통 프리팹(prefab)으로 사용됩니다.
position: 새로운 게임 오브젝트가 생성될 위치를 나타냅니다.
rotation: 새로운 게임 오브젝트의 회전을 나타냅니다. 

rotation : 회전. 이미지 회전 등.

Quaternion.Euler(0, 0, plmv.angleZ)는 오일러 각을 사용하여 회전을 나타내는 Quaternion 값을 생성하는 함수입니다.

여기서 각 값은 오일러 각(Euler angle)으로, 각 축 주위의 회전 각도를 나타냅니다. 각도는 플레이어 컨트롤러(PlayerController)의 angleZ 값에 의해 결정됩니다.

첫 번째 인자는 X 축 주위의 회전 각도를 나타냅니다. 여기서는 0으로 설정되어 있으므로 X 축 주위의 회전은 없습니다.
두 번째 인자는 Y 축 주위의 회전 각도를 나타냅니다. 역시 0으로 설정되어 있으므로 Y 축 주위의 회전은 없습니다.
세 번째 인자인 plmv.angleZ는 Z 축 주위의 회전 각도를 나타냅니다. 이 각도는 plmv 변수의 angleZ 속성에 의해 제어됩니다.
이렇게 생성된 Quaternion 값은 Unity의 회전을 나타내는 데 사용됩니다. 이 값을 Transform.rotation에 할당하면 해당 오브젝트가 지정된 회전으로 회전합니다.


Mathf.Cos(angleZ * Mathf.Deg2Rad)은 주어진 각도에 대한 코사인 값을 계산하는 함수입니다.

여기서 사용된 함수 및 상수는 Unity의 Mathf 클래스의 멤버들입니다:

Mathf.Cos: 주어진 각도의 코사인 값을 계산합니다.
Mathf.Deg2Rad: 각도를 라디안(radian)으로 변환하기 위한 상수입니다.
일반적으로 수학에서 각도는 도(degrees) 단위로 표시되지만, 코사인 함수는 라디안 단위로 작동합니다. 따라서 주어진 각도를 라디안으로 변환한 후에 코사인 함수를 적용해야 합니다. Mathf.Deg2Rad 상수는 이러한 변환을 수행하기 위해 사용됩니다.

따라서 Mathf.Cos(angleZ * Mathf.Deg2Rad)는 angleZ 각도의 코사인 값을 계산하며, 이 값은 -1에서 1 사이의 범위를 가집니다. 이 값은 보통 각도에 따른 움직임이나 회전을 계산할 때 사용됩니다.


Mathf.Cos(angleZ * Mathf.Deg2Rad)와 Mathf.Sin(angleZ * Mathf.Deg2Rad)를 사용하여 각도 angleZ에 대한 코사인과 사인 값을 계산합니다. 이 값들은 각도에 따른 x 축 방향과 y 축 방향의 움직임을 나타냅니다.

x: angleZ에 대한 코사인 값을 나타내며, 이 값은 각도가 변할 때 x 축 방향으로의 움직임을 나타냅니다.
y: angleZ에 대한 사인 값을 나타내며, 이 값은 각도가 변할 때 y 축 방향으로의 움직임을 나타냅니다.
그런 다음, 이 x와 y 값을 사용하여 Vector3의 새로운 인스턴스를 만듭니다. 여기서 Vector3는 Unity에서 3D 공간에서 사용되는 벡터를 나타내며, 보통 (x, y, z) 형태로 위치나 방향을 표현합니다. 하지만 여기서는 z 값을 명시하지 않고 (x, y) 평면에 해당하는 벡터를 만듭니다.

따라서 Vector3 v = new Vector3(x, y) * shootSpeed;는 x와 y 값으로 벡터를 생성하고, 그 벡터를 shootSpeed만큼의 크기로 스케일링한 결과를 v에 할당합니다. 이렇게 얻은 벡터는 shootSpeed만큼의 크기와 angleZ 각도에 따라 방향이 결정된 벡터를 나타냅니다. 이러한 방식으로 주로 프로젝타일의 발사 방향을 설정하거나 오브젝트의 이동 방향을 결정할 때 사용됩니다.

유니티에서 OnCollisionEnter2D와 OnTriggerEnter2D는 각각 충돌과 트리거 이벤트를 처리하는 메서드입니다. 이 둘의 성능 차이는 주로 사용되는 상황과 구현 방식에 따라 다를 수 있습니다.

OnCollisionEnter2D:

이벤트가 발생하려면 물리적인 충돌이 있어야 합니다.
두 개의 Collider가 서로 물리적으로 충돌할 때 호출됩니다.
충돌체가 Rigidbody를 가지고 있어야 하며, 물리 시뮬레이션에 영향을 줄 수 있습니다.
트리거(Collider의 isTrigger가 false인 경우)와 다른 점은 물리적인 특성을 가진다는 것입니다.
물리 계산이 추가되므로 상대적으로 처리량이 많을 수 있습니다.
OnTriggerEnter2D:

이벤트가 발생하려면 Collider 중 하나가 트리거로 설정되어야 합니다.
물리적인 충돌은 필요하지 않습니다. 단순히 Collider가 트리거로 설정되면 이벤트가 발생합니다.
Rigidbody가 없는 Collider도 사용할 수 있습니다.
물리 시뮬레이션에 영향을 주지 않기 때문에 일반적으로 더 가볍고 빠릅니다.
따라서 성능을 고려한다면 다음을 고려해야 합니다:

물리적 충돌이 필요한지 여부: 만약 물리적 충돌이 필요하지 않다면 OnTrigger 이벤트를 사용하는 것이 더 경제적입니다.
이벤트를 발생시킬 Collider의 특성: Collider가 Rigidbody를 가지고 있는지 여부와 Collider가 트리거로 설정되어 있는지 여부에 따라서도 선택이 달라집니다.
일반적으로는 성능상의 큰 차이가 없지만, 특정 상황에서는 더 나은 선택을 할 수 있습니다. 따라서 프로젝트의 요구사항과 상황을 고려하여 결정하는 것이 좋습니다.

