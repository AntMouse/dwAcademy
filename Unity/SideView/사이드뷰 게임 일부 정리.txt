1. 4-29
프레임, 물리 엔진(힘을 가하는 방식).
캐릭터 직접적인 움직임은 프레임으로 조정. 프레임당 얼마만큼 이동.

총을 쏠 때 나가는 총알은 물리 엔진으로 조정. 특정 힘에 의해 얼마만큼 움직이느냐. 물리적인 힘을 가해서 힘이 떨어질 때까지 움직임. 예를 들어 처음 총을 쏘면 처음엔 직선으로 가다가 중력에 의해 아래로 점점 떨어짐. 변수의 영향을 많이 받음.

2. 4-30
github.com/hyungwonseo/unity
Scenes : 스테이지.
화면 영역에 카메라 바깥 부분은 안 나옴.
Scripts : 코드.
Prefab : 재료에 특정한 세팅을 한 것을 따로 저장해둠. 나중에 다시 사용하기 편함.

pivot(피봇) : 회전을 할 때 회전의 중심점.

Orthographic : 거리에 따른 크기 차이 X. 2D 게임에서 사용.

fixed update() {} 함수는 가벼우면서 중요한 코드가 들어감. 무겁고, 오래 걸리는 코드는 넣으면 잘못 작동할 수 있다.

rigidbody2D : 물리적 특성 부여.
Vector2 = z축 없이 x,y 축만 고려. 방향과 속도를 같이 나타냄.

3. 5-2.
Start 함수는 첫 프레임 전에 실행. 게임 시작 전. 순서를 지정할 수 없음. 유니티가 알아서 정하기 때문. 이런 문제 때문에 Start 이전에 불리는 함수도 있다.

FixedUpdate는 위의 Update와 엇박이 되는 게 좋다. 0.02초를 못 지키면 시스템 전체에 문제가 생길 수 있다. 물리적인 부분(Physics2D)만 간결하게 넣는 게 좋음.

플레이어에게만 플레이어 태그를 넣어야함.

콜라이더는 전부 마찰 계수를 가지고 있다.

addForce 메서드는 Rigidbody 2D가 어태치된 게임 오브젝트에 힘을 가하는 메서드. 물리 법칙으로 움직이고 가해지는 힘은 벡터로 표시. ForceMode2D.Impulse에서 impulse는 순간적으로 힘을 가한다는 의미다.

4. 5-3.

OnTrigger, OnCollision은 다르다. 후자가 더 비쌈.

5. 5-7.

velocity는 해당 게임 오브젝트의 현재 이동 속도를 나타내는Vector2형 변수.
Vector2는 2차원 좌표(x축, y축)의 값을 정하는 형. x나 y값이 커지면 화살표 길이가 늘어나고 그만큼 속도 증가.

Time.deltaTime 해당 함수가 얼마마다 불리느냐. 30프레임을 사용한 update에 사용하면 0.0333초 값을 반환.

컴포넌트(component) : 게임 오브젝트를 여러 가지 용도로 변화시키고자 부여하는 데이터.

화면 중앙 : 씬 뷰
화면 왼쪽 : 계층 뷰
화면 오른쪽 : 인스펙터 뷰

트랜스폼(Transform) : 위치, 회전, 크기 조절하는 컴포넌트.
스프라이트 렌더러(Sprite Renderer) : 이미지를 표시하는 컴포넌트.
- Sorting Layer : 레이어라는 그룹으로 묶고 표시의 우선순위를 그롭별로 지정.
- Order in Layer : Sorting Layer로 나눈 레이어 중 값이 클수록 앞에 표시됨.

File > Build Settings... 
여기서 씬 순서 수정 및 추가&삭제 가능.

이미지 모인 폴더에 가서 이미지 클릭하고, 인스펙터 창에서 Pivot를 보면 dlallw의 기준이 되는 점을 설정할 수 있다. 기본 값은 Center이다. Bottom으로 하는 게 편하다.

어태치 : 게임 오브젝트에 컴포넌트를 붙여 기능을 추가.

Rigidbody 2D : 게임 오브젝트에 중력 등 물리 법칙이 적용되게 하는 기능.
Dynamic : 물리 시뮬레이션의 영향을 받아 동작.
Kinematic : 중력이나 외부 힘의 영향 안 받게 됨.
Static : 물리 시뮬레이션의 영향 안 받게 됨.

update : 1프레임에 1번 호출. 다만, 같은 간격으로 호출된다는 보장은 없음.
fixedUpdate : 0.02초에 한 번. 같은 간격으로 호출됨. 물리 시뮬레이션을 여기서처럼 일정하게 작동해야 움직임이 어긋나지 않으니까.

Input.GetAxisRaw() : 입력 확인 코드.
Edit > Project Settings > Input Manager 여기서 input 명령어 관리 가능.

velocity : 해당 오브젝트의 현재 이동속도를 나타내는 Vector2형 변수.
Vector2(x, y) : 2차원 좌표의 값을 정함. x나 y값이 커지면 그만큼 속도가 빨라진다. 여기서 velocity.y는 y값에 현재 속도를 대입한다는 걸 의미함.

isTrigger를 체크하면 물리적인 충돌하지 않고 통과한다.
블록 배치할 때 V키 누르고 배치하면 깔끔하게 배치가 된다.

GetKey, GetMouseButton, GetButton 등은 GetKeyDown, GetKey, GetKeyUp 으로 3가지로 나뉜다. 키가 눌렸을 때, 눌린 채로 있을 때, 떼어졌을 때를 각각 감지한다.

GetAxis/GetAxisRaw가 있다. 처음은 아날로그 스틱의 값이고 –1~0~1을 나타내고, 두 번째는 –1, 0, 1 세 가지 중 하나의 값을 가진다.

Linecast 메서드는 지정한 두 점을 연결하는 선에 게임 오브젝트가 접촉하는지 조사해 true또는 false의 bool형을 반환함.