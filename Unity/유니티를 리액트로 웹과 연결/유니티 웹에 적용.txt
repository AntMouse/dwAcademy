<WebGL 빌드하고 React 적용하기>
1. 유니티 WebGL 빌드환경 적용. build setting메뉴 들어가기. WebGL 클릭. install 클릭(오른쪽 중간쯤에 버튼 있음). switch 클릭(버튼 아래쪽에 있음).
2. Player Settings – Publishing Settings – Compression Format >> disabled. 위에 순서대로 들어가서, 마지막 Compression Format 이거에서 disabled를 클릭해서 설정을 바꿔주라는 뜻. player Settings... 이거는 왼쪽 아래에 버튼이 있다.
3. Build 클릭.
4. 성공하면 아래 파일 4개가 생성된다. Build.data / Build.framework.js / Build.loader.js / Build.wasm >> 앞에 Build는 폴더 이름이라 폴더 이름에 따라 Build 대신 다른 이름이 나올 수도 있다. 자기가 선택한 폴더의 이름에 따라 달라진다는 뜻.
5. 4개 파일을 리액트 폴더내 아래 위치에 복사. 리액트 프로젝트 폴더에 node_modules, public, src 폴더가 있는데 public 폴더에 Build 폴더를 만들고 그 폴더 안에 4개 파일을 넣으면 된다.

React에서 WebGL 세팅하기
1. vscode로 리액트를 열고 src에 UnityGame.js 컴포넌트 생성.
2. App 컴포넌트에 추가 function App() { return ( <UnityGame /> ); }
3. 터미널창에서 react-unity-webgl 인스톨. npm install react-unity-webgl.
4. 아래 컴포넌트 임포트 import { Unity, useUnityContext } from "react-unity-webgl"; 여기 부분은 App.js에서 하는 게 아니라 UnityGame.js에서 한다. App.js는 어차피 UnityGame.js를 임포트 하면 끝.
5. UnityProvider 세팅
	const {unityProvider} = useUnityContext({
        loaderUrl: "Build/WebGLTest.loader.js",
        dataUrl: "Build/WebGLTest.data",
        frameworkUrl: "Build/WebGLTest.framework.js",
        codeUrl: "Build/WebGLTest.wasm",
    });

6. 게임플레이 화면을 담을 jsx태그 안에서 Unity태그 작성. 
<Unity style={{width: "100%", height: "100%"}}
unityProvider={unityProvider} />

리액트에서 터미널에서 npm start를 사용하면 해당 코드 실행.

React To Unity
1. useUnityContext로부터 sendMessage 함수를 얻음
2. Unity의 특정 게임오브젝트가 가진 함수를 직접 호출함. 유니티의 게임오브젝트 이름이 ‘Player’이고 Player오브젝트가 ‘Attack’이라는 함수를 가지고 있다면, sendMessage(“Player”, “Attack”); player가 attack이라는 함수를 호출하게 한다.
3. 함수 호출시 매개변수가 포함되는 경우에는 sendMessage(“Player”, “Attack”, 매개변수1, 매개변수2); 매개변수를 순서대로 넣어주면 된다.

Unity To React
같은 이벤트 이름을 정의한다.
1. useUnityContext로부터 이벤트 핸들러를 얻음. addEventListener와 removeEventListener.
>>> 

useUnityContext로부터 이벤트 핸들러를 얻음:

useUnityContext 훅을 사용하여 Unity WebGL 콘텐츠와 상호작용하는 데 필요한 여러 속성 및 메서드를 가져옵니다.
이 예제에서는 addEventListener와 removeEventListener 메서드를 사용하여 Unity에서 발생하는 이벤트를 처리합니다.

2. useCallback 후크를 이용하여 특정 이벤트가 발생할 때 호출될 함수를 선언함.
>>>

useCallback 후크를 이용하여 특정 이벤트가 발생할 때 호출될 함수를 선언함:

useCallback 훅을 사용하여 이벤트 핸들러 함수를 선언합니다. 이렇게 하면 해당 함수가 메모이제이션되어 의존성 배열에 있는 값들이 변경되지 않는 한 동일한 함수 인스턴스를 유지합니다.
여기서는 handleGameOver라는 이벤트 핸들러를 정의하여 Unity에서 "GameOver" 이벤트가 발생할 때 실행됩니다.

3. 위에서 얻은 이벤트 핸들러를 useEffect 후크에서 특정 이벤트 이름으로 선언함.
>>>

위에서 얻은 이벤트 핸들러를 useEffect 후크에서 특정 이벤트 이름으로 선언함:

useEffect 훅을 사용하여 컴포넌트가 마운트될 때 이벤트 리스너를 추가하고, 컴포넌트가 언마운트될 때 이벤트 리스너를 제거합니다.
useEffect의 의존성 배열에 addEventListener, removeEventListener, handleGameOver를 포함하여 이 값들이 변경될 때마다 효과가 재실행되도록 합니다.

유니티에서 해야 할 일. 리액트에서 한 게 있으니까 이제는 유니티에서 해야 한다.
4. React.jslib 파일 생성 >> 유니티로 만든 폴드에서 Assets/Plugins/WebGL 폴더 아래에 생성. Plugins, WebGL 폴더는 직접 만들어야 한다. 이 파일에는 윈도우용 코드가 들어간다.
사용된 코드.

mergeInto(LibraryManager.library, {
    GameOverToReact: function (userName, score) {
        window.dispatchReactUnityEvent("GameOver", UTF8ToString(userName), score);
    },
});

5. 유니티에서 해당 이벤트를 발송할 cs파일 수정. 
#if UNITY_WEBGL == true && UNITY_EDITOR == false
    GameOverToReact("Player1", 100);
#endif

위 코드는 GameOver 메서드에 넣었다. 실제로 4번에서 쓴 코드도 “GameOver” 이게 나온다. 유니티 C#에서 사용한 코드 전체는 아래와 같다.

    public void GameOver()
    {
        Debug.Log("게임오버 메서드 실행");
        animator.Play(deadAnime);

        gameState = "gameover";
        GameStop(); // 게임 중지
        // ==================
        // 게임 오버 연출
        // ==================
        // 플레이어의 충돌 판정 비활성
        GetComponent<CapsuleCollider2D>().enabled = false;
        // 플레이어를 위로 튀어 오르게 하는 연출
        rbody.AddForce(new Vector2(0, 5), ForceMode2D.Impulse);
#if UNITY_WEBGL == true && UNITY_EDITOR == false
    GameOverToReact("Player1", 100);
#endif
    }

4번에서 정의한 함수를 호출하는 코드를 작성. 위에 #으로 시작하는 코드. 
6. 4번에서 정의한 함수를 직접 호출하면 안 되므로(C#에서 선언한 내부 함수가 아니라 아예 다른 곳(외부)에서 만든 거니까 당연) 해당 함수가 외부라이브러리에 있다는 것을 알려줘야 함.
예)     
[DllImport("__Internal")]
private static extern void GameOverToReact(string userName, int score);

위 예에 있는 코드는 public class PlayerController : MonoBehaviour
{

여기 바로 아래에 적었다. 실제론 아래와 같이 되어 있다.
public class PlayerController : MonoBehaviour
{
    // extern은 외부 함수를 의미함.
    [DllImport("__Internal")]
    private static extern void GameOverToReact(string userName, int score);
-----------------------------------------------------------------------------
https://react-unity-webgl.dev/
사이트 참고.