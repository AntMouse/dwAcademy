8-1.
조인 : 2개 이상의 테이블을 연결해서 하나의 테이블처럼 출력하는 방식. 집합 연산자는 SELECT 값을 세로로 연결하고, 조인은 가로로 연결함.

FROM EMP, DEPT >> 단순히 이런 식으로만 하면 엄청 많은 데이터가 나옴. 2개 테이블에서 각 테이블을 구성하는 행이 모든 경우의 수로 조합되어 출력되기 때문.

FROM EMP E, DEPT D >> 테이블에 별칭 지정 가능. WHERE E.DEPTNO = D.DEPTNO 이런 식으로 이름이 동일한 열을 별칭을 이용해 구분해서 WHERE에 적용 가능.

8-2.
조인은 등가 조인, 비등가, 자체, 외부 등이 있다.
등가 조인(내부 조인, 단순 조인).

조인 조건을 지정 안 하면 모든 경우의 수가 다 나온다. 이 현상이 안 일어나게 하려면 조인 테이블 개수에서 하나를 뺀 조건식을 추가하면 된다. A, B 테이블을 조인할 경우 A와 B를 정확히 연결해주는 열이 하나 필요하다(2 – 1 = 1 이므로 최소 1개는 필요하다는 뜻).

등가 조인 예시.
SELECT E.EMPNO, E.ENAME, E.JOB, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
ORDER BY EMPNO;

비등가 조인 예시.
SELECT *
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

자체 조인(셀프 조인) = 하나의 테이블을 여러 개의 테이블처럼 활용해서 조인하는 방식.
예시.
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO;

외부 조인(아우터 조인) = 두 테이블간 조인 수행에서 조인 기준 열의 어느 한쪽이 NULL이어도 강제로 출력하는 방식.

예시.
SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO(+)
ORDER BY E1.EMPNO;
왼쪽 외부 조인. +가 있다. 왼쪽 열을 기준으로 오른쪽 열의 데이터 존재 여부에 상관없이 출력하라는 뜻.

SELECT E1.EMPNO, E1.ENAME, E1.MGR, E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR(+) = E2.EMPNO
ORDER BY E1.EMPNO;

외부 조인을 사용하지 않는 등가, 자체 조인은 조인 조건에 해당하는 데이터가 존재할 경우에만 출력한다(내부조인).

8-3.
FROM EMP E NATURAL JOIN DEPT D // SELECT에 E나 D 붙이지 않고 DEPTNO 사용해야함. 자료형이 같은 열을 찾아서 그 열을 기준으로 등가 조인을 한다.

FROM EMP E JOIN DEPT D USING (DEPTNO) // 위랑 마찬가지로 DEPTNO 사용. 결과도 마찬가지. 등가 조인.

FROM EMP E JOIN DEPT D ON (E.DEPTNO = D.DEPTNO) // SELECT에서 E.DEPTNO 등 사용.

FROM EMP E1 LEFT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO) // 왼쪽 외부 조인.

FROM EMP E1 RIGHT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO) // 오른쪽 외부 조인.

FROM EMP E1 FULL OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO) // 전체 외부 조인. 왼쪽 열이 NULL인 경우와 오른쪽 열이 NULL인 경우 모두 출력.

3개 이상 테이블 조인.
1.
FROM E1, E2, E3
WHERE E1.E = E2.E
AND E2.E = E3.E

2. 
FROM E1 JOIN E2 ON (E1.E = E2.E)
JOIN E3 ON (E2.E = E3.E)

9-1.
서브쿼리 : SQL문을 실행하는 데 필요한 데이터를 추가로 조회하기 위해 SQL문 안에 작성하는 작은 SELECT문.

메인쿼리 : 서브쿼리 결과 값을 써서 기능을 수행하는 영역.

서브쿼리 기본 예.
SELECT *
FROM EMP
WHERE SAL > (SELECT SAL
            FROM EMP
            WHERE ENAME = 'JONES');

서브쿼리는 대부분 ORDER BY 사용 불가. 메인쿼리의 비교 대상 데이터가 1개면 서브쿼리의 SELECT절도 같은 자료형인 열을 하나 지정해야 한다. 메인쿼리의 연산자와 함께 상호 작용하는 방식에 따라 단일행, 다중행으로 나뉜다.

9-2.
단일행 서브쿼리 : 실행 결과가 단하나의 행으로 나오는 서브쿼리. 단일행 연산자 사용(>, != 등).

서브쿼리의 결과로 여러 행을 반환하면 다중행 서브쿼리를 써야됨.

9-3.
다중행 서브쿼리 : 실행 결과 행이 여러 개로 나오는 서브쿼리. 결과가 여러 개이므로 단일행 연산자 못쓰고 다중행 연산자 써야됨. IN / ANY, SOME / ALL / EXISTS가 있다.

각 부서별 최고 급여와 동일한 급여를 받는 사원 정보 출력.
SELECT *
FROM EMP
WHERE SAL IN (SELECT MAX(SAL)
                FROM EMP
                GROUP BY DEPTNO);

ANY, SOME : 서브쿼리가 반환한 결과 값 중 메인쿼리와 조건식을 사용한 결과가 하나라도 true면 메인쿼리 조건식을 true로 반환. 위 코드에서 WHERE SAL = ANY 이렇게 하면 IN을 사용한 것과 같은 결과가 나온다(=를 사용하는 경우에 한해서 정확히 같은 기능 수행).

30번 부서 사원들의 최대 급여보다 적은 급여를 받는 사원 정보 출력하기.
SELECT *
FROM EMP
WHERE SAL < ANY (SELECT SAL
                FROM EMP
                WHERE DEPTNO = 30)
ORDER BY SAL, EMPNO;

다른 값보다 큰 값이더라도 하나의 값보다만 작으면 true가 나온다. 위의 코드는 WHERE SAL < (SELECT MAX(SAL) 이렇게 바꿔도 같은 효과를 낸다.

반대로 > ANY는 최솟값보다 큰 값이면 true다.

ALL은 서브쿼리의 모든 결과가 조건식에 맞아떨어져야 true.

부서 번호가 30번인 사원들의 최소 급여보다 더 적은 급여를 받는 사원 출력하기.

SELECT *
FROM EMP
WHERE SAL < ALL (SELECT SAL
                    FROM EMP
                    WHERE DEPTNO = 30);

반대로 > 이걸 사용하면 최대 급여보다 더 많은 급여를 받는 사원 정보 출력이 된다.

EXISTS : 서브쿼리에 결과 값이 하나 이상 존재하면 조건식이 모두 true.
SELECT *
FROM EMP
WHERE EXISTS (SELECT DNAME
                FROM DEPT
                WHERE DEPTNO = 10);
위 코드는 제대로 결과가 나온다. 그런데 WHERE DEPTNO = 50; 이런 식으로 DEPTNO에 존재하지 않는 값을 넣으면 아무 행도 출력되지 않는다. 참고로 위 코드는
SELECT *
FROM EMP;
이것과 결과 값이 같다.

9-4.
다중열 서브쿼리.
SELECT *
FROM EMP
WHERE (DEPTNO, SAL) IN (SELECT DEPTNO, MAX(SAL)
                        FROM EMP
                        GROUP BY DEPTNO);

9-5.
FROM에 사용하는 서브쿼리(인라인 뷰).
SELECT E10.EMPNO, E10.ENAME, D.DEPTNO, D.DNAME, D.LOC
FROM (SELECT * FROM EMP WHERE DEPTNO = 10) E10, (SELECT * FROM DEPT) D
WHERE E10.DEPTNO = D.DEPTNO;  

FROM절에 테이블을 사용하기엔 테이블이 너무 크거나 현재 작업에 필요 없는 열이 많아서 필요한 행과 열만 사용할 때 사용.

위와 같지만 WITH 사용한 것.
WITH
E10 AS (SELECT * FROM EMP WHERE DEPTNO = 10),
D AS (SELECT * FROM DEPT)
SELECT E10.EMPNO, E10.ENAME, D.DEPTNO, D.DNAME, D.LOC
FROM E10, D
WHERE E10.DEPTNO = D.DEPTNO;

9-6.
스칼라 서브쿼리 : SELECT절에 하나의 열 영역으로 사용해서 결과 출력. 하나의 결과만 반환하도록 작성해야함.
SELECT E.EMPNO, E.ENAME, E.JOB, E.SAL,
        (SELECT GRADE
        FROM SALGRADE
        WHERE E.SAL BETWEEN LOSAL AND HISAL) AS SALGRADE,
        DEPTNO,
        (SELECT DNAME
        FROM DEPT
        WHERE E.DEPTNO = DEPT.DEPTNO) AS DNAME
FROM EMP E;
