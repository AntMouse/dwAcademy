3-1.

"navbar-expand-lg"는 부트스트랩에서 사용되는 클래스 이름 중 하나입니다. 이 클래스는 브라우저의 너비에 따라 네비게이션 바(NAV bar)의 표시 방식을 결정합니다. "lg"는 브라우저의 너비가 큰 경우(일반적으로 데스크톱 화면)에 해당하는 클래스입니다.

"navbar-expand-lg" 클래스를 사용하면 일반적으로 작은 화면에서는 네비게이션 바가 축소되어 아이콘 버튼이 표시되고, 넓은 화면에서는 전체 네비게이션 바가 표시됩니다. 이것은 반응형 웹 디자인을 구현하는 데 도움이 되며, 사용자가 다양한 장치에서 웹 사이트를 이용할 때 더 나은 경험을 제공할 수 있습니다.

"navbar-expand-lg" 클래스는 화면이 큰 경우(일반적으로 데스크톱 화면)에 네비게이션 바를 확장하여 전체 너비로 표시하도록 지시합니다. 따라서 브라우저의 너비가 일정 이상인 경우 네비게이션 바가 확장되어 표시됩니다.

<button class="navbar-toggler">는 부트스트랩에서 네비게이션 바(navbar)를 작은 화면에서 토글할 때 사용되는 토글 버튼을 생성하는 역할을 합니다.

일반적으로 웹 페이지가 작은 화면에서 보여질 때 네비게이션 바는 축소되어 모든 링크가 표시되지 않습니다. 이때 사용자가 네비게이션 메뉴를 열고 닫을 수 있도록 하는 것이 토글 버튼입니다.

navbar-toggler 클래스는 부트스트랩에서 토글 버튼을 스타일링하기 위한 클래스입니다. 이 버튼을 클릭하면 네비게이션 바의 메뉴가 펼쳐지거나 축소됩니다. 이 동작은 부트스트랩의 JavaScript 컴포넌트를 사용하여 처리됩니다.

따라서 <button class="navbar-toggler">는 사용자가 작은 화면에서 네비게이션 바를 열고 닫을 수 있도록 하는 역할을 합니다.

data-bs-toggle="collapse" 속성은 부트스트랩의 컴포넌트를 토글하는 데 사용됩니다. 여기서는 네비게이션 바의 햄버거 아이콘을 클릭했을 때 메뉴 항목이 축소되거나 펼쳐지도록 지정하는 데 사용됩니다.

구체적으로 말하면, data-bs-toggle="collapse" 속성은 네비게이션 바의 햄버거 아이콘 클릭 시 연결된 요소(여기서는 data-bs-target 속성을 통해 지정된 #navbarSupportedContent)의 축소와 확장을 토글합니다. 이를 통해 작은 화면에서는 메뉴 항목을 감추거나 표시하여 사용자 경험을 향상시킵니다.

"collapse"는 부트스트랩에서 사용되는 클래스와 자바스크립트 컴포넌트로, HTML 요소를 숨기거나 펼칠 수 있게 합니다. 이 클래스는 주로 토글 기능을 사용하여 요소를 보이거나 숨기는 데 활용됩니다.

부트스트랩의 네비게이션 바에서 "collapse" 클래스는 작은 화면에서 메뉴를 토글하는 데 사용됩니다. 햄버거 아이콘을 클릭하면 메뉴가 축소되거나 확장됩니다. 이것은 사용자가 작은 화면에서 더 많은 공간을 활용하고, 필요할 때 메뉴를 표시할 수 있도록 합니다.

또한, "collapse" 클래스는 자바스크립트와 함께 사용되어 토글 동작을 지원합니다. 자바스크립트를 사용하면 사용자 상호작용에 반응하여 요소를 동적으로 제어할 수 있습니다. 이를 통해 사용자 경험을 향상시키고, 필요에 따라 요소를 표시하거나 숨길 수 있습니다.

"토글(toggle)"은 두 가지 상태 간의 전환을 의미합니다. 부트스트랩에서의 "토글"은 보이는 상태에서 숨겨진 상태로, 또는 숨겨진 상태에서 보이는 상태로 변경될 때를 가리킵니다.

예를 들어, 네비게이션 바의 경우, 사용자가 햄버거 아이콘을 클릭하면 메뉴가 토글됩니다. 즉, 메뉴가 보이는 상태에서는 숨겨지고, 숨겨진 상태에서는 보이도록 전환됩니다. 사용자가 다시 아이콘을 클릭하면 메뉴의 상태가 다시 변경됩니다. 이러한 행위를 "토글"이라고 합니다.

토글 기능은 UI 요소를 사용자가 직관적으로 제어할 수 있도록 도와주며, 작은 화면에서 유용하게 사용됩니다. 사용자가 필요할 때만 추가 콘텐츠를 표시하고, 필요하지 않을 때는 숨길 수 있도록 합니다.

aria-controls 속성은 웹 콘텐츠의 접근성을 개선하기 위해 사용되는 WAI-ARIA 속성 중 하나입니다. 이 속성은 현재 요소가 제어하는 다른 요소의 ID를 지정합니다.

네비게이션 바의 경우, aria-controls="navbarSupportedContent"는 해당 네비게이션 바 토글 버튼이 사용자 인터페이스에서 "navbarSupportedContent"라는 ID를 가진 요소를 제어한다는 것을 나타냅니다. 즉, 이 버튼을 클릭하면 "navbarSupportedContent" ID를 가진 요소의 상태가 변경됩니다. 이 경우, 네비게이션 바의 메뉴가 축소되거나 확장됩니다.

data-bs-target 속성과 aria-controls 속성은 같은 요소를 가리킵니다. 이들은 모두 부트스트랩 네비게이션 컴포넌트를 제어하기 위해 사용됩니다.

따라서 data-bs-target="#navbarSupportedContent" 및 aria-controls="navbarSupportedContent"에서 #navbarSupportedContent는 대상 요소의 ID입니다. 이것은 토글 버튼이 클릭되었을 때 열리거나 닫힐 네비게이션 바를 가리킵니다.

이 두 속성은 서로 다른 목적을 가지고 있지만, 이 경우에는 같은 대상을 가리킵니다. data-bs-target은 JavaScript를 통해 토글 동작을 실행할 때 사용되고, aria-controls는 보조 기술에 의해 이 요소가 제어하는 컨텐츠가 무엇인지 설명하는 데 사용됩니다.

aria-expanded 속성은 웹 콘텐츠의 접근성을 개선하기 위해 사용되는 WAI-ARIA 속성 중 하나입니다. 이 속성은 요소의 상태를 나타내며, 해당 요소가 펼쳐져 있는지 또는 축소되어 있는지를 나타냅니다.

여기서 "aria-expanded="false"는 요소가 현재 축소되어 있다는 것을 나타냅니다. 

예를 들어, 네비게이션 바의 햄버거 아이콘을 클릭하기 전에는 메뉴가 축소되어 있으므로 aria-expanded="false"로 설정됩니다. 이 속성은 사용자가 토글 버튼을 클릭하여 메뉴를 펼치면 해당 값이 "true"로 변경됩니다. 

여기서 "aria-label="Toggle navigation"은 요소가 토글 동작을 수행하는 버튼임을 설명합니다.

"Toggle navigation"은 일반적으로 토글 버튼이나 토글 아이콘을 클릭했을 때 발생하는 동작을 나타냅니다.

여기서는 네비게이션 바의 햄버거 아이콘을 클릭하여 네비게이션 메뉴를 펼치거나 숨기는 동작을 토글하는 버튼이기 때문에 "Toggle navigation"으로 레이블이 설정되었습니다. 이것은 사용자에게 버튼이 네비게이션 메뉴를 토글한다는 것을 명확하게 전달합니다.

즉, "Toggle navigation"은 햄버거 아이콘이 클릭되었을 때 네비게이션 메뉴를 펼치거나 숨기는 행동을 나타내는 간단한 설명입니다. 이는 사용자에게 해당 버튼의 기능을 명확하게 알려주어 사용자 경험을 개선하는 데 도움이 됩니다.

class="collapse"는 부트스트랩에서 사용되는 클래스로, HTML 요소를 기본적으로 숨기는 역할을 합니다. 이 클래스를 사용하면 요소를 페이지에 표시하지 않고 숨길 수 있습니다.

보통 이 클래스는 부트스트랩의 토글 기능과 함께 사용됩니다. 예를 들어, 네비게이션 바의 메뉴가 작은 화면에서 보이지 않고 햄버거 아이콘을 클릭할 때만 나타나게 하려면 메뉴 요소에 class="collapse"를 추가하여 기본적으로 메뉴를 숨길 수 있습니다. 그런 다음 JavaScript와 함께 토글 버튼을 클릭하면 메뉴가 나타나게 할 수 있습니다.

종종, collapse 클래스는 navbar-collapse와 같은 클래스와 함께 사용되어 작은 화면에서 네비게이션 바의 메뉴를 숨기고, 토글 버튼을 클릭하면 메뉴가 나타나도록 만드는 데 사용됩니다.

부트스트랩에서는 네비게이션 바의 특정 부분을 제어할 때 navbar-collapse 클래스를 사용합니다. 이 클래스는 네비게이션 바가 작은 화면에서 축소되었을 때 표시되는 메뉴의 영역을 나타냅니다.

그러나 collapse 클래스는 부트스트랩의 컴포넌트 중 하나로, 요소를 초기에 숨기거나 표시하는 데 사용됩니다. 이 클래스는 보통 JavaScript와 함께 사용되어 요소의 숨김 및 표시를 제어합니다.

따라서 <div class="collapse navbar-collapse">는 네비게이션 바의 일부인데, 이는 작은 화면에서는 축소되었을 때 숨겨져야 하지만, 사용자가 토글 버튼을 클릭하여 메뉴를 표시할 때 표시되어야 합니다. 따라서 collapse 클래스로 요소를 숨기고, navbar-collapse 클래스로 네비게이션 바의 일부임을 나타내는 것입니다.

id="navbarSupportedContent"를 사용하여 토글 버튼과 관련된 요소를 직접 지정하는 것도 가능합니다. 그러나 부트스트랩과 같은 프레임워크나 라이브러리를 사용할 때는 해당 요소에 정확한 클래스를 추가하는 것이 권장됩니다.

navbar-collapse 클래스는 부트스트랩에서 네비게이션 바의 일부임을 나타내는 역할을 합니다. 이 클래스를 사용하여 부트스트랩의 JavaScript 기능이 해당 요소를 제어하고 메뉴를 열고 닫을 수 있도록 합니다.

따라서 id="navbarSupportedContent"만 사용하는 것은 순수한 HTML에서도 기능적으로 가능하지만, 부트스트랩과 같은 프레임워크를 사용하는 경우에는 프레임워크가 요구하는 클래스를 추가하여 일관성을 유지하는 것이 좋습니다. 이렇게 함으로써 부트스트랩의 기능을 올바르게 작동시킬 수 있습니다.

class="navbar-nav"는 부트스트랩에서 사용되는 클래스로, 네비게이션 바의 메뉴 항목을 나타내는 데 사용됩니다. 이 클래스를 사용하면 네비게이션 바의 메뉴 항목들이 수평으로 배치되고 적절한 여백과 스타일이 적용됩니다.

일반적으로 네비게이션 바의 메뉴 항목들은 navbar-nav 클래스 내에 포함됩니다. 이를 통해 부트스트랩은 네비게이션 바의 메뉴 항목들을 적절한 스타일과 레이아웃으로 보여줄 수 있습니다.

따라서 class="navbar-nav"를 사용하여 네비게이션 바의 메뉴 항목들을 지정하면 해당 요소들이 네비게이션 바의 일부로 간주되고 적절한 스타일이 적용됩니다.

"me" 클래스의 "e"는 "end"를 나타냅니다. 즉, "me" 클래스는 마진을 나타내는데, "end"는 해당 마진을 요소의 끝 부분(일반적으로 오른쪽)에 적용한다는 것을 의미합니다.

이와 유사하게 "ms" 클래스는 "margin start"를 나타내며, 해당 마진을 요소의 시작 부분(일반적으로 왼쪽)에 적용합니다. 이러한 클래스들은 주로 텍스트나 요소의 정렬을 다룰 때 유용하게 사용됩니다.

일반적으로 "me" 클래스는 다른 요소와의 간격을 조절하기 위해 사용됩니다. 예를 들어, class="me-3"는 해당 요소의 오른쪽 마진을 3단위만큼 설정합니다. 마찬가지로, class="me-4"는 오른쪽 마진을 4단위만큼 설정합니다.

따라서 mb-lg-0 클래스는 large 스크린 사이즈에서 마진-bottom을 0으로 설정합니다. 즉, 큰 화면에서는 해당 요소의 아래쪽에 아무런 여백이 없도록 지정합니다.

이 클래스는 주로 responsively(반응)하게 마진을 조정하는 데 사용됩니다. 예를 들어, 작은 화면에서는 일정한 여백을 가지고, 큰 화면에서는 여백을 없애는 등의 다양한 레이아웃 조정에 활용됩니다.

class="nav-item"은 부트스트랩에서 네비게이션 바의 메뉴 항목을 스타일링하기 위해 사용되는 클래스입니다. 이 클래스를 사용하면 메뉴 항목이 올바른 스타일과 레이아웃을 가지게 됩니다.

nav-link 클래스는 부트스트랩에서 네비게이션 바(navbar)의 링크 스타일을 지정하는 데 사용됩니다. 이 클래스를 사용하면 네비게이션 바의 링크가 일관된 디자인과 스타일을 갖게 됩니다.

일반적으로 네비게이션 바는 수평적으로 배치된 링크 모음으로 구성됩니다. 이러한 링크들은 사용자에게 사이트의 다른 섹션으로 이동할 수 있는 링크를 제공합니다. 하지만 HTML <a> 요소 자체는 링크를 정의하는 데 사용되며, 스타일을 적용하기 위해서는 클래스를 추가해야 합니다.

따라서 nav-link 클래스는 네비게이션 바에서 링크에 부트스트랩의 스타일을 적용하는 데 사용됩니다. 이를 통해 링크가 일관된 디자인을 갖게 되고 사용자에게 더 나은 시각적 경험을 제공할 수 있습니다.

%03d
%는 형식 지정자를 시작함을 나타냅니다.
0은 필드의 최소 폭을 나타냅니다. 이 경우에는 필드의 최소 폭이 3으로 설정되었습니다. 따라서 값이 3자리 미만인 경우 앞에 0으로 채워집니다.
3은 최소 폭에 적용되는 정수 값입니다. 즉, 최소 폭이 3으로 설정되었으므로, 값이 3자리 미만인 경우 앞에 0으로 채워집니다.
d는 해당 값이 정수임을 나타냅니다.

3-2.

스프링 부트(Spring Boot)의 페이징 기능을 구현할 때 첫 페이지 번호는 1이 아닌 0이므로 기본값으로 0을 설정해야 한다.

템플릿에 Page 클래스의 객체인 paging을 model에 설정하여 전달했다. paging 객체에는 다음과 같은 속성들이 있는데, 이 속성들은 템플릿에서 페이징을 처리할 때 필요하므로 미리 알아 두자.

속성
설명
paging.isEmpty
페이지 존재 여부를 의미한다(게시물이 있으면 false, 없으면 true).
paging.totalElements
전체 게시물 개수를 의미한다.
paging.totalPages
전체 페이지 개수를 의미한다.
paging.size
페이지당 보여 줄 게시물 개수를 의미한다.
paging.number
현재 페이지 번호를 의미한다.
paging.hasPrevious
이전 페이지의 존재 여부를 의미한다.
paging.hasNext
다음 페이지의 존재 여부를 의미한다.



타임리프의 th:classappend="조건식 ? 클래스_값"은 조건식이 참인 경우 '클래스_값'을 class 속성에 추가한다.

주소의 기본 부분(호스트, 포트, 경로 등)은 명시적으로 지정하지 않고, 상대적인 URL을 생성합니다.

따라서 th:href="@{|?page=${paging.number-1}|}"에서 ?page=${paging.number-1} 부분은 상대적인 URL로 해석되며, 현재 페이지의 주소를 기준으로 상대적인 경로가 만들어집니다. 그러므로 상대적인 주소인 ?page=${paging.number-1}이 주소에 포함됩니다.

따라서 이 코드를 실행할 때 실제 URL은 http://localhost:8080/question/list?page=1에 대해 ?page=0 또는 다른 숫자로 변환될 것입니다. Thymeleaf는 이를 처리하는 동안 주소의 기본 부분을 고려하지 않고, 단지 상대적인 경로를 생성합니다.

th:each="page: ${#numbers.sequence(0, paging.totalPages-1)}“
0부터 전체 페이지 수 만큼 이 요소를 반복하여 생성한다. 이때 현재 순번을 page 변수에 대입한다.

#numbers.sequence(시작 번호, 끝 번호)는 시작 번호부터 끝 번호까지 정해진 범위만큼 반복을 만들어 내는 타임리프의 기능이다.

Sort는 일반적으로 데이터 정렬에 사용되는 클래스입니다. 예를 들어 Java에서 Spring Framework의 일부로 제공되는 org.springframework.data.domain.Sort 클래스는 데이터를 정렬하는 데 사용됩니다.

Sort.Order는 정렬 순서를 지정하는 데 사용되는 클래스입니다. Sort 객체는 하나 이상의 Sort.Order 객체를 포함하며, 이러한 순서에 따라 데이터를 정렬합니다.

따라서 List<Sort.Order> sorts는 Sort.Order 객체를 담는 리스트를 선언하는 것으로 보입니다. 이 리스트는 데이터를 여러 기준에 따라 정렬하는 데 사용될 것입니다.

Sort.Order는 정렬의 순서를 나타내는 클래스입니다. 보통 데이터를 정렬할 때, 하나 이상의 정렬 기준을 지정해야 합니다. 예를 들어 이름으로 오름차순 정렬하고, 나이로 내림차순 정렬할 수 있습니다.

Sort.Order 객체는 정렬 기준을 정의하는 데 사용됩니다. 예를 들어 이름으로 오름차순 정렬을 하려면 Sort.Order.asc("name")와 같이 사용할 수 있습니다. 나이로 내림차순 정렬을 하려면 Sort.Order.desc("age")와 같이 사용할 수 있습니다.

따라서 List<Sort.Order> sorts는 정렬할 기준들을 담는 리스트를 선언하는 것입니다. 이 리스트에는 여러 개의 정렬 기준이 포함될 수 있습니다.

Sort는 정렬을 의미하고, Order는 정렬 기준을 나타내며 정렬 방식을 지정합니다. 일반적으로 "오름차순(ascending)" 또는 "내림차순(descending)"과 같은 정렬 방식을 지정하게 됩니다.

따라서 Sort.Order.asc("name")은 "이름을 오름차순으로 정렬하라"는 의미이고, Sort.Order.desc("age")는 "나이를 내림차순으로 정렬하라"는 의미입니다. 이러한 정렬 기준들을 Sort 객체에 추가하여 데이터를 해당 기준에 따라 정렬할 수 있습니다.

Sort.Order 클래스는 정렬 방식을 지정하는 메서드인 asc() 또는 desc()를 사용하지 않고도 사용할 수 있습니다. Sort.Order 객체를 생성할 때에는 정렬 기준만을 지정할 수 있습니다. 실제로 정렬 방식을 지정하는 것은 아닙니다.

따라서 List<Sort.Order>로 정의된 sorts 리스트에는 정렬 방식이 아니라, 정렬의 기준이 추가될 것입니다. 후에 이 리스트에는 필요한 정렬 방식과 함께 Sort.Order 객체가 추가될 수 있습니다.

예를 들어, 다음과 같이 사용될 수 있습니다:

sorts.add(Sort.Order.asc("name")); // 이름을 오름차순으로 정렬하는 기준 추가
sorts.add(Sort.Order.desc("age")); // 나이를 내림차순으로 정렬하는 기준 추가

이렇게 하면 sorts 리스트에는 각각 "이름을 오름차순으로 정렬"하는 기준과 "나이를 내림차순으로 정렬"하는 기준이 추가됩니다. 이후에 이러한 정렬 기준들을 사용하여 데이터를 정렬할 수 있습니다.

Sort.Order 클래스는 정렬 방법을 정하지 않은 빈 껍데기로 볼 수 있습니다. 이 클래스는 단순히 정렬에 사용될 기준을 정의하는 것이며, 실제로 어떻게 정렬할 것인지에 대한 정보는 아직 포함되어 있지 않습니다.

나중에 실제로 데이터를 정렬할 때, asc()나 desc()와 같은 메서드를 사용하여 정렬 방법을 추가할 수 있습니다. 이것은 정렬 방법을 추가하는 과정입니다. 따라서 Sort.Order 객체는 정렬 방법을 저장할 수 있는 클래스로서 정의될 수 있습니다.

그러므로 Sort.Order 객체를 생성할 때에는 단순히 정렬에 사용될 기준을 지정할 뿐, 정렬 방법은 나중에 추가됩니다.

만약 작성 일시 외에 정렬 조건을 추가하고 싶다면 sort.add 메서드를 활용해 sorts 리스트에 추가하면 된다.

Sort.by(sorts)는 주어진 정렬 기준에 따라 정렬을 수행하는데 사용되는 정적 팩토리 메서드입니다. 이 메서드는 Sort 객체를 생성하고, 해당 객체에 정렬 기준을 적용합니다. Sort.by() 메서드는 가변 인자를 받아들이기 때문에 여러 개의 정렬 기준을 한 번에 지정할 수 있습니다.

예를 들어, Sort.by(sorts)는 sorts 리스트에 있는 정렬 기준들을 이용하여 정렬하는 Sort 객체를 생성합니다. sorts 리스트에는 "createDate"를 내림차순으로 정렬하는 방식과 이름을 오름차순으로 정렬하는 방식이 있었을 경우, Sort.by(sorts)는 이 두 가지 정렬 기준을 포함한 Sort 객체를 생성합니다.

이렇게 생성된 Sort 객체는 PageRequest.of() 메서드를 통해 페이지 요청을 만들 때 사용될 수 있습니다. 이렇게 함으로써 페이지 요청에 대해 지정된 정렬 방식을 가질 수 있게 됩니다.

3-3.

만약 질문 게시물이 12개라면 1페이지에는 가장 최근 게시물인 12번째~3번째 게시물이, 2페이지에는 2번째~1번째 게시물이 역순으로 표시되어야 한다. 질문 게시물의 번호를 역순으로 정렬하려면 다음 공식을 적용해야 한다.

게시물 번호 = 전체 게시물 개수 - (현재 페이지 * 페이지당 게시물 개수) - 나열 인덱스

질문 게시물이 12개인 상황을 예로 들어 설명해 보자. 현재 페이지가 0이면 게시물의 번호는 전체 게시물 개수 12에서 나열 인덱스 0~9를 뺀 12~3이 된다. 현재 페이지가 1이면 페이지당 노출되는 게시물 개수는 10이므로 12에서 10을 뺀 값인 2에 나열 인덱스 0~1을 다시 빼므로 게시물 번호는 2~1이 된다.

3-4.

일반적으로 HTML에서 ms는 "margin start"의 약어로 사용됩니다. 이것은 CSS에서 레이아웃을 조정할 때 사용되는 속성입니다. s는 start를 의미하며, 이는 주로 왼쪽 여백을 조정하는 데 사용됩니다. "start"는 문서의 텍스트가 왼쪽에서 오른쪽으로 흐르는 방향에 따라 왼쪽 여백을 가리킵니다.

따라서 ms-2는 왼쪽 여백을 2단계 크기만큼 추가한다는 의미입니다. 여기서 숫자는 여백의 크기를 결정합니다. 예를 들어, ms-2는 일반적으로 0.5rem(또는 8px)의 여백을 추가합니다.

3-5.

스프링 시큐리티는 스프링 기반 웹 애플리케이션의 인증과 권한을 담당하는 스프링의 하위 프레임워크이다. 여기서 인증(authenticate)은 로그인과 같은 사용자의 신원을 확인하는 프로세스를, 권한(authorize)은 인증된 사용자가 어떤 일을 할 수 있는지(어떤 접근 권한이 있는지) 관리하는 것을 의미한다.

@Configuration은 이 파일이 스프링의 환경 설정 파일임을 의미하는 애너테이션이다.

@EnableWebSecurity는 모든 요청 URL이 스프링 시큐리티의 제어를 받도록 만드는 애너테이션이다. 이 애너테이션을 사용하면 스프링 시큐리티를 활성화하는 역할을 한다. 내부적으로 SecurityFilterChain 클래스가 동작하여 모든 요청 URL에 이 클래스가 필터로 적용되어 URL별로 특별한 설정을 할 수 있게 된다. 스프링 시큐리티의 세부 설정은 @Bean 애너테이션을 통해 SecurityFilterChain 빈을 생성하여 설정할 수 있다.

http.authorizeHttpRequests((authorizeHttpRequests) -> authorizeHttpRequests.
requestMatchers(new AntPathRequestMatcher("/**")).permitAll()).

인증되지 않은 모든 페이지의 요청을 허락한다는 의미이다. 따라서 로그인하지 않더라도 모든 페이지에 접근할 수 있도록 한다.

빈(bean)은 스프링에 의해 생성 또는 관리되는 객체를 의미한다. 우리가 지금껏 만들어 왔던 컨트롤러, 서비스, 리포지터리 등도 모두 빈에 해당한다. 또한 앞선 예처럼 @Bean 애너테이션을 통해 자바 코드 내에서 별도로 빈을 정의하고 등록할 수도 있다.

403 Forbidden은 작동 중인 서버에 클라이언트의 요청이 들어왔으나, 서버가 클라이언트의 접근을 거부했을 때 반환하는 HTTP 오류 코드이다. 이 오류는 서버 또는 서버에 있는 파일 등에 접근 권한이 없을 경우에 발생한다.

403 Forbidden 오류가 발생하는 이유를 좀 더 구체적으로 설명하면, 스프링 시큐리티의 CSRF 방어 기능에 의해 H2 콘솔 접근이 거부되기 때문이다. CSRF는 웹 보안 공격 중 하나로, 조작된 정보로 웹 사이트가 실행되도록 속이는 공격 기술이다. 스프링 시큐리티는 이러한 공격을 방지하기 위해 CSRF 토큰을 세션을 통해 발행하고, 웹 페이지에서는 폼 전송 시에 해당 토큰을 함께 전송하여 실제 웹 페이지에서 작성한 데이터가 전달되는지를 검증한다.

토큰이란 요청을 식별하고 검증하는 데 사용하는 특수한 문자열 또는 값을 의미한다.

세션이란 사용자의 상태를 유지하고 관리하는 데 사용하는 기능이다.

CSRF 토큰은 서버에서 생성되는 임의의 값으로 페이지 요청 시 항상 다른 값으로 생성된다.

스프링 시큐리티는 이런 식으로 페이지에 CSRF 토큰을 발행하여 이 값이 다시 서버로 정확하게 들어오는지를 확인하는 과정을 거친다. 만약 CSRF 토큰이 없거나 해커가 임의의 CSRF 토큰을 강제로 만들어 전송한다면 스프링 시큐리티에 의해 차단될 것이다. 정리하자면, H2 콘솔은 스프링 프레임워크가 아니므로 CSRF 토큰을 발행하는 기능이 없어 이와 같은 403 오류가 발생한 것이다.

H2 콘솔은 스프링과 상관없는 일반 애플리케이션이다.

스프링 시큐리티가 CSRF 처리 시 H2 콘솔은 예외로 처리할 수 있도록 다음과 같이 설정 파일을 수정하자.
.csrf((csrf) -> csrf.
ignoringRequestMatchers(new AntPathRequestMatcher("/h2-console/**")))
이와 같이 /h2-console/로 시작하는 모든 URL은 CSRF 검증을 하지 않는다는 설정을 추가했다. 이렇게 수정하고 로컬 서버를 재시작한 후 다시 H2 콘솔에 접속해 보자.

스프링 시큐리티는 웹 사이트의 콘텐츠가 다른 사이트에 포함되지 않도록 하기 위해 X-Frame-Options 헤더의 기본값을 DENY로 사용하는데, 프레임 구조의 웹 사이트는 이 헤더의 값이 DENY인 경우 이와 같이 오류가 발생한다.

스프링 부트에서 X-Frame-Options 헤더는 클릭재킹 공격을 막기 위해 사용한다. 클릭재킹은 사용자의 의도와 다른 작업이 수행되도록 속이는 보안 공격 기술이다.

.headers((headers) -> headers
.addHeaderWriter(new XFrameOptionsHeaderWriter(
XFrameOptionsHeaderWriter.XFrameOptionsMode.SAMEORIGIN)))

이와 같이 URL 요청 시 X-Frame-Options 헤더를 DENY 대신 SAMEORIGIN으로 설정하여 오류가 발생하지 않도록 했다. X-Frame-Options 헤더의 값으로 SAMEORIGIN을 설정하면 프레임에 포함된 웹 페이지가 동일한 사이트에서 제공할 때에만 사용이 허락된다.



