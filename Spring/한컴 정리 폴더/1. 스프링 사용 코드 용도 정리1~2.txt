2-3.
스프링 부트는 JPA(Java Persistence API)를 사용하여 데이터베이스를 관리한다. 스프링 부트는 JPA를 ORM(Object-Relational Mapping) 기술의 표준으로 사용한다. JPA는 인터페이스 모음이므로, 이 인터페이스를 구현한 실제 클래스가 필요하다. JPA를 구현한 실제 클래스에는 대표적으로 하이버네이트(Hibernate)가 있다. 정리하자면, 하이버네이트는 JPA의 인터페이스를 구현한 실제 클래스이자 자바의 ORM 프레임워크로, 스프링 부트에서 데이터베이스를 관리하기 쉽게 도와준다. 우리가 계속 만들어 갈 SBB도 JPA와 하이버네이트 조합으로 데이터베이스를 관리한다.

2-4.
@Column(columnDefinition = "TEXT")
엔티티의 속성은 테이블의 열 이름과 일치하는데 열의 세부 설정을 위해 @Column 애너테이션을 사용한다. length는 열의 길이를 설정할 때 사용하고(여기서는 열의 길이를 200으로 정했다.), columnDefinition은 열 데이터의 유형이나 성격을 정의할 때 사용한다. 여기서 columnDefinition = "TEXT"는 말 그대로 ‘텍스트’를 열 데이터로 넣을 수 있음을 의미하고, 글자 수를 제한할 수 없는 경우에 사용한다.

@OneToMany(mappedBy = "question", cascade = CascadeType.REMOVE) 
Answer 객체들로 구성된 answerList를 Question 엔티티의 속성으로 추가하고 @OneToMany 애너테이션을 설정했다. 이제 질문에서 답변을 참조하려면 question.getAnswerList()를 호출하면 된다. @OneToMany 애너테이션에 사용된 mappedBy는 참조 엔티티의 속성명을 정의한다. 즉, Answer 엔티티에서 Question 엔티티를 참조한 속성인 question을 mappedBy에 전달해야 한다.

게시판 서비스에서는 질문 하나에 답변이 여러 개 작성될 수 있다. 그런데 보통 게시판 서비스에서는 질문을 삭제하면 그에 달린 답변들도 함께 삭제된다. SBB도 질문을 삭제하면 그에 달린 답변들도 모두 삭제되도록 cascade = CascadeType.REMOVE를 사용했다.

2-5.
레포지토리에서 메서드 자동 생성을 이용해서 sql 연산자를 이용한다. 여기서 메서드에 넣을 걸로는 And, Or, Between, LessThan, GreaterThanEqual, Like, In, OrderBy.


SQL 연산자
리포지터리의 메서드 예시
설명
And
findBySubjectAndContent(String subject, String content)
Subject, Content 열과 일치하는 데이터를 조회
Or
findBySubjectOrContent(String subject, String content)
Subject열 또는 Content 열과 일치하는 데이터를 조회
Between
findByCreateDateBetween(LocalDateTime fromDate, LocalDateTime toDate)
CreateDate 열의 데이터 중 정해진 범위 내에 있는 데이터를 조회
LessThan
findByIdLessThan(Integer id)
Id 열에서 조건보다 작은 데이터를 조회
GreaterThanEqual
findByIdGreaterThanEqual(Integer id)
Id 열에서 조건보다 크거나 같은 데이터를 조회
Like
findBySubjectLike(String subject)
Subject 열에서 문자열 ‘subject’와 같은 문자열을 포함한 데이터를 조회. 이때 조건이 되는 문자열로 sbb% 같이 %를 적어줘야 한다. sbb%는 sbb로 시작하는 문자열을 의미한다.
In
findBySubjectIn(String[] subjects)
Subject 열의 데이터가 주어진 배열에 포함되는 데이터만 조회
OrderBy
findBySubjectOrderByCreateDateAsc(String subject)
Subject 열 중 조건에 일치하는 데이터를 조회하여 CreateDate 열을 오름차순으로 정렬하여 반환

데이터를 필요한 시점에 가져오는 방식을 지연(Lazy) 방식이라고 한다. 이와 반대로 q 객체를 조회할 때 미리 answer 리스트를 모두 가져오는 방식은 즉시(Eager) 방식이라고 한다. @OneToMany, @ManyToOne 애너테이션의 옵션으로 fetch=FetchType.LAZY 또는 fetch=FetchType.EAGER처럼 가져오는 방식을 설정할 수 있다.

2-6.

도메인은 질문, 답변처럼 프로젝트의 주요 기능을 뜻하는 말이다.

2-7.
Model 객체는 자바 클래스(Java class)와 템플릿(template) 간의 연결 고리 역할을 한다. Model 객체에 값을 담아 두면 템플릿에서 그 값을 사용할 수 있다. Model 객체는 따로 생성할 필요 없이 컨트롤러의 메서드에 매개변수로 지정하기만 하면 스프링 부트가 자동으로 Model 객체를 생성한다.

th:each="question, loop : ${questionList}"
여기서 추가한 loop 객체를 이용하여 루프 내에서 다음과 같이 사용할 수 있다.

loop.index: 루프의 순서(루프의 반복 순서, 0부터 1씩 증가)
loop.count: 루프의 순서(루프의 반복 순서, 1부터 1씩 증가)
loop.size: 반복 객체의 요소 개수(예를 들어 questionList의 요소 개수)
loop.first: 루프의 첫 번째 순서인 경우 true
loop.last: 루프의 마지막 순서인 경우 true
loop.odd: 루프의 홀수 번째 순서인 경우 true
loop.even: 루프의 짝수 번째 순서인 경우 true
loop.current: 현재 대입된 객체(여기서는 question과 동일)

2-9.

서비스란 무엇일까? 서비스(service)는 간단히 말해 스프링에서 데이터 처리를 위해 작성하는 클래스이다.

2-10.
요청한 URL인 http://localhost:8080/question/detail/2의 숫자 2처럼 변하는 id값을 얻을 때에는 @PathVariable 애너테이션을 사용한다. 이때 @GetMapping(value = "/question/detail/{id}")에서 사용한 id와 @PathVariable("id")의 매개변수 이름이 이와 같이 동일해야 한다.

@ResponseStatus 어노테이션은 스프링 프레임워크에서 사용되며, 컨트롤러에서 예외가 발생했을 때 HTTP 응답 상태 코드를 지정하는 데 사용됩니다.

여기서 @ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "entity not found")는 DataNotFoundException 예외가 발생했을 때 HTTP 응답의 상태 코드를 "404 Not Found"로 설정하고, 이유(reason)를 "entity not found"로 설정함을 의미합니다.

즉, 이 어노테이션은 예외가 발생했을 때 스프링이 해당 예외에 대한 HTTP 응답 상태 코드와 이유를 지정할 수 있게 해줍니다. 이를 통해 클라이언트에게 적절한 상태 코드와 메시지를 반환하여 웹 애플리케이션의 사용자 경험을 향상시킬 수 있습니다.

private static final long serialVersionUID = 1L; 문장은 자바 직렬화(Serialization)에서 사용됩니다.

직렬화는 객체의 상태를 바이트 스트림으로 변환하여 저장하거나 네트워크를 통해 전송할 수 있도록 하는 프로세스입니다. 직렬화된 객체는 나중에 역직렬화하여 다시 객체로 변환할 수 있습니다. 이 프로세스는 자바에서 Serializable 인터페이스를 구현한 클래스에 적용됩니다.

serialVersionUID는 직렬화된 클래스의 버전을 식별하는 데 사용됩니다. 직렬화된 클래스를 변경할 때마다 버전 UID를 변경해야 합니다. 그렇지 않으면 역직렬화 시에 버전 불일치로 인한 오류가 발생할 수 있습니다.

따라서 serialVersionUID를 명시적으로 선언함으로써 클래스의 직렬화 버전을 관리하고, 변경된 클래스에 대해 버전 충돌을 방지할 수 있습니다. 이 문장은 일반적으로 직렬화가 필요한 클래스에 추가되며, 해당 클래스의 버전 관리를 위해 사용됩니다.

이 값을 1로 설정한 것은 초기 버전을 나타내는 것으로 볼 수 있습니다. 즉, 클래스의 첫 번째 직렬화 버전이라는 의미일 수 있습니다.

따라서 1L을 사용한 것은 편의상 초기 버전을 나타내기 위함일 수 있습니다. 일반적으로 직렬화 클래스의 serialVersionUID는 1부터 시작하는 정수 값으로 설정되는 경우가 많습니다.

2-12.

POST 방식은 주로 데이터를 저장하는 용도로 사용한다는 점을 한 번 더 상기하자.

@RequestParam(value="content") String content가 추가되었다. 이는 앞서 작성한 템플릿(question_detail.html)에서 답변으로 입력한 내용(content)을 얻으려고 추가한 것이다. 템플릿의 답변 내용에 해당하는 <textarea>의 name 속성명이 content이므로 여기서도 변수명을 content로 사용한다. /create/{id}에서 {id}는 질문 엔티티의 id이므로 이 id값으로 질문을 조회하고 값이 없을 경우에는 404 오류가 발생할 것이다.

2-14.
#temporals.format(날짜 객체, 날짜 포맷)와 같이 사용하는데, 날짜 객체를 날짜 포맷에 맞게 변환한다.

style="white-space: pre-line;"은 CSS 스타일 속성으로, 사용자가 입력한 대로 줄 바꿈이 적용되도록 만들어 준다.


부트스트랩 클래스
설명
card, card-body, card-text
card 컴포넌트를 적용하는 클래스들이다.
badge
badge 컴포넌트를 적용하는 클래스이다.
form-control
텍스트 창에 form 컴포넌트를 적용하는 클래스이다.
border-bottom
아래 방향 테두리 선을 만드는 클래스이다.
my-3
상하 마진값으로 3을 지정하는 클래스이다.
py-2
상하 패딩값으로 2를 지정하는 클래스이다.
p-2
상하좌우 패딩값으로 2를 지정하는 클래스이다.
d-flex justify-content-end
HTML 요소를 오른쪽으로 정렬하는 클래스이다.
bg-light
연회색으로 배경을 지정하는 클래스이다.
text-dark
글자색을 검은색으로 지정하는 클래스이다.
text-start
글자를 왼쪽으로 정렬하는 클래스이다.
btn btn-primary
버튼 컴포넌트를 적용하는 클래스이다.


부트스트랩에서의 "badge"는 작은 레이블 또는 표시를 나타냅니다. 일반적으로 텍스트나 숫자를 강조하거나, 상태를 나타내는 데 사용됩니다. 예를 들어, 알림 수, 댓글 수, 또는 상태 표시에 사용될 수 있습니다.

Flexbox는 유연한 박스 모델을 사용하여 요소의 크기와 순서를 유연하게 조절할 수 있도록 하는 CSS 레이아웃 모델입니다. Flexbox를 사용하면 요소들을 수평 또는 수직으로 정렬하거나, 간격을 조절하고 요소의 순서를 변경하는 등의 다양한 레이아웃을 쉽게 구현할 수 있습니다.

d-flex 클래스는 해당 요소를 Flexbox 컨테이너로 만들어줍니다. 이 클래스를 적용하면 해당 요소의 하위 요소들이 Flexbox 레이아웃을 따르게 됩니다.

d-flex justify-content-end는 요소를 Flexbox 컨테이너로 만들고, 내부 요소들을 컨테이너의 끝 부분에 정렬하도록 지정하는 것입니다. 여기서 justify-content-end는 Flexbox에서 하위 요소를 컨테이너의 끝 부분에 정렬하는 CSS 속성입니다.

class="form-control"는 부트스트랩에서 제공하는 클래스 중 하나로, 폼 요소를 스타일링하고 일관된 디자인을 적용하는 데 사용됩니다.

여기서 form-control 클래스는 <textarea> 요소에 적용됩니다. 이 클래스를 사용하면 <textarea> 요소가 부트스트랩에서 제공하는 폼 컨트롤의 스타일과 레이아웃을 따르게 됩니다. 이는 사용자에게 텍스트 입력 필드가 일관된 디자인으로 표시되고 사용하기 편리하도록 도와줍니다.

form-control 클래스는 폼 요소인 <input>과 <select>와 함께 사용되어 각종 입력 요소에 일관된 스타일을 적용하는 데 유용합니다. 이를 통해 웹 페이지의 폼 요소들이 일관된 모습으로 표시되고 사용자 경험이 향상됩니다.
2-15.

<th:block>와 layout:fragment는 Thymeleaf 템플릿 엔진에서 사용되는 것으로 보입니다. Thymeleaf은 HTML 템플릿을 사용하여 동적 웹 페이지를 만들 수 있는 Java 웹 프레임워크인 Spring Framework와 통합되는 데 자주 사용됩니다.

여기서 layout는 Thymeleaf에서 레이아웃 템플릿을 정의할 때 사용되는 키워드입니다. layout.html이라는 파일은 일종의 레이아웃 템플릿으로, 이 파일을 기반으로 다른 페이지들이 레이아웃을 공유하게 됩니다. <th:block layout:fragment="content"></th:block> 부분은 이 레이아웃 템플릿의 일부분으로, content라는 이름의 프래그먼트를 정의하는 것입니다. 이 부분은 실제 페이지에서 해당 위치에 들어갈 내용을 대체할 때 사용됩니다.

따라서 layout는 Thymeleaf의 특별한 키워드로, 파일 이름과 직접적으로 연관되는 것은 아닙니다.

2-16.

<label for="subject" class="form-label">제목</label>에서 for="subject"는 해당 라벨이 어떤 폼 요소와 연결되어 있는지를 나타냅니다. 여기서 for 속성의 값은 연결할 폼 요소의 id 값입니다.

따라서 이 라벨은 id="subject"를 가진 폼 요소와 연결되어 있습니다. 즉, 이 라벨을 클릭하면 id="subject"를 가진 폼 요소로 포커스가 이동하게 됩니다.

HTML에서 label 요소의 for 속성은 해당 라벨과 연결된 폼 요소를 지정합니다. 이를 통해 사용자가 라벨을 클릭했을 때 연결된 폼 요소에 대한 포커스를 설정하거나, 스크린 리더 등 보조 기술을 사용하는 사용자에게 더 나은 접근성을 제공할 수 있습니다.

class="form-label"은 부트스트랩에서 폼 요소의 라벨을 스타일링하는 데 사용되는 클래스입니다.

부트스트랩의 form-label 클래스는 라벨 요소(<label>)에 적용되며, 해당 라벨이 폼 요소와 관련된 텍스트를 나타내는 데 사용될 때 사용됩니다. 이 클래스를 사용하면 라벨이 일관된 디자인으로 스타일링되어 사용자에게 더 나은 사용자 경험을 제공할 수 있습니다.

form-label 클래스는 주로 폼 요소와 관련된 라벨을 보다 시각적으로 돋보이게 만들기 위해 사용됩니다. 이 클래스를 사용하면 폼 요소와 라벨이 시각적으로 더 일치하고 사용자가 입력할 내용을 더 쉽게 이해할 수 있도록 도와줍니다.

따라서 class="form-label"은 부트스트랩에서 폼 요소의 라벨을 스타일링하여 보다 일관된 디자인을 적용하는 데 사용되는 클래스입니다.

Spring Boot Validation 라이브러리를 설치하면 다음과 같은 애너테이션을 사용하여 사용자가 입력한 값을 검증할 수 있다.

항목
설명
@Size
문자 길이를 제한한다.
@NotNull
Null을 허용하지 않는다.
@NotEmpty
Null 또는 빈 문자열("")을 허용하지 않는다.
@Past
과거 날짜만 입력할 수 있다.
@Future
미래 날짜만 입력할 수 있다.
@FutureOrPresent
미래 또는 오늘 날짜만 입력할 수 있다.
@Max
최댓값 이하의 값만 입력할 수 있도록 제한한다.
@Min
최솟값 이상의 값만 입력할 수 있도록 제한한다.
@Pattern
입력값을 정규식 패턴으로 검증한다.


QuestionForm 매개변수 앞에 @Valid 애너테이션을 적용했다. @Valid 애너테이션을 적용하면 QuestionForm의 @NotEmpty, @Size 등으로 설정한 검증 기능이 동작한다. 그리고 이어지는 BindingResult 매개변수는 @Valid 애너테이션으로 검증이 수행된 결과를 의미하는 객체이다.

BindingResult 매개변수는 항상 @Valid 매개변수 바로 뒤에 위치해야 한다. 만약 두 매개변수의 위치가 정확하지 않다면 @Valid만 적용되어 입력값 검증 실패 시 400 오류가 발생한다.

폼(form) 클래스 또한 컨트롤러, 서비스와 같이 웹 프로그램을 개발하는 주요 구성 요소 중 하나로, 웹 프로그램에서 사용자가 입력한 데이터를 검증하는 데 사용한다.

Thymeleaf에서 th:object 속성은 폼 요소와 관련된 객체를 지정하는 데 사용됩니다. 이 속성은 폼을 작성하는 데 필요한 데이터를 제공하는 객체를 지정합니다.

${questionForm}는 Thymeleaf가 현재 페이지에서 사용할 수 있는 모델 객체입니다. th:object 속성은 이 모델 객체를 폼에 바인딩하여 폼 요소에 데이터를 채울 수 있도록 합니다.

따라서, th:object="${questionForm}"은 해당 폼의 데이터를 제공하는 모델 객체를 지정하는 것입니다. 이렇게 하면 Thymeleaf가 폼 요소를 해당 모델 객체의 속성에 바인딩하여 폼을 렌더링할 수 있습니다.

Thymeleaf에서 "th:object" 속성을 사용하여 지정된 객체를 참조할 수 있습니다. 따라서 "${questionForm}"은 이 폼의 객체 모델을 나타냅니다. 그리고 "#fields"는 Thymeleaf에서 폼 필드의 상태와 관련된 정보를 제공하는 객체입니다.

"${#fields.hasAnyErrors()}"는 Thymeleaf에서 제공하는 기능으로, 폼 필드에 대한 유효성 검사 오류를 확인합니다. 이것은 "questionForm" 객체에 바인딩된 폼 필드의 유효성 검사 결과를 기반으로 작동합니다. 만약 폼 필드에 오류가 있다면, 해당 오류를 처리하기 위해 설정된 메시지를 표시하게 됩니다.

따라서, "#fields"는 Thymeleaf가 폼 처리를 위해 제공하는 객체이며, "${questionForm}"은 해당 폼의 모델을 나타냅니다. Thymeleaf는 이 두 가지를 조합하여 폼 처리와 유효성 검사를 처리합니다.

th:object="${questionForm}"은 Thymeleaf에서 폼 요소와 백엔드의 모델을 연결하는 부분입니다. 이 부분은 QuestionForm 클래스로 생성한 객체 questionForm을 폼 요소와 연결합니다.

th:object 속성은 폼 요소가 사용할 데이터 모델을 지정하는 데 사용됩니다. 이것은 데이터 바인딩을 통해 폼 요소의 값을 모델 객체의 속성에 매핑하고, 또한 폼 요소의 초기값을 설정하는 데 사용됩니다.

따라서 th:object="${questionForm}"은 폼 요소의 값들을 QuestionForm 객체의 속성과 연결하며, 이는 백엔드 컨트롤러에서 @Valid 어노테이션을 통해 유효성 검사를 수행할 때 사용됩니다.

부트스트랩의 alert alert-danger 클래스를 사용하여 오류 메시지가 붉은 색으로 표시되도록 했다. 이렇게 오류를 표시하려면 타임리프의 th:object 속성이 반드시 필요한데, th:object는 <form>의 입력 항목들이 QuestionForm과 연결된다는 점을 타임리프에 알려주는 역할을 한다.

여기에서 "fields"는 Thymeleaf의 폼 처리를 위한 객체입니다. Thymeleaf는 Spring 프레임워크와 함께 자주 사용되며, Spring의 폼 처리 기능과 통합하여 사용할 수 있습니다.

"fields" 객체는 Thymeleaf에서 폼 필드의 상태와 관련된 정보를 제공합니다. 이를 통해 폼 필드에 대한 유효성 검사 오류 또는 바인딩 오류를 확인할 수 있습니다.

여기서 "${#fields.hasAnyErrors()}"는 현재 요청에 대한 폼 필드 유효성 검사 오류가 있는지 여부를 확인하는 Thymeleaf 표현식입니다. 만약 오류가 있다면, 오류 메시지를 사용자에게 표시하게 됩니다.

"role"은 HTML 요소의 역할을 지정하는 속성입니다. 이 속성은 보조 기술이나 웹 브라우저와 같은 기기에서 요소의 기능을 이해하고 사용할 수 있도록 도와줍니다.

"role" 속성의 값은 해당 요소의 역할을 설명하는 문자열입니다. "alert"의 경우, 이 요소가 사용자에게 중요한 경고나 알림을 전달하는 역할을 한다는 것을 나타냅니다. 이는 보조 기술을 사용하는 사용자에게 이 요소가 중요한 정보를 담고 있다고 알려줍니다.

따라서, "role='alert'"는 이 경고(alert) 요소가 사용자에게 중요한 정보를 전달하는 역할을 한다는 것을 나타냅니다.

설명에서 언급한 대로 폼 클래스는 입력값 검증뿐만 아니라 입력 항목을 바인딩할 때도 사용됩니다. 이는 사용자가 폼을 제출하기 전에 입력한 데이터를 서버로 전송하기 위해 폼 요소와 폼 클래스 간에 값을 연결하는 과정을 말합니다.

따라서 GET 방식으로 매핑된 컨트롤러 메서드에서도 QuestionForm 객체가 필요합니다. 이는 사용자가 폼을 요청할 때(브라우저에서 해당 URL을 요청할 때) 폼을 렌더링하는 데 사용됩니다. 이때 Thymeleaf의 th:object 속성을 사용하여 폼 클래스와 뷰를 연결하고, 폼 요소를 폼 클래스의 속성에 바인딩합니다.

따라서 GET 방식으로 매핑된 메서드에서도 QuestionForm 객체를 반환하고, 해당 객체를 Thymeleaf 뷰에 전달하여 폼 요소를 렌더링하고 데이터를 바인딩해야 합니다. 이를 통해 사용자가 입력한 데이터는 폼 클래스의 객체에 바인딩되고, 이후 POST 방식으로 데이터가 제출될 때 검증 및 처리될 수 있습니다.

QuestionForm과 같이 매개변수로 바인딩한 객체는 Model 객체로 전달하지 않아도 템플릿에서 사용할 수 있다.

name="subject", name="content" 대신 th:field 속성을 사용하도록 변경했다. 이렇게 하면 해당 태그의 id, name, value 속성이 모두 자동으로 생성되고 타임리프가 value 속성에 기존에 입력된 값을 채워 넣어 오류가 발생하더라도 기존에 입력한 값이 유지된다.

createAnswer 메서드에서는 특정 질문에 대한 답변을 생성하는 작업을 수행하고, 만약 유효성 검사에 실패한 경우 해당 질문의 세부 정보를 보여주는 페이지로 이동해야 합니다. 이를 위해서는 해당 질문 객체를 생성하고 그 정보를 모델에 담아야 합니다.

따라서 createAnswer 메서드에서는 먼저 요청된 질문에 대한 정보를 데이터베이스에서 가져와야 합니다. 이를 위해 주어진 ID를 사용하여 특정 질문을 검색합니다. 이 질문 객체를 모델에 추가하고, 이후에는 유효성 검사 결과를 확인하여 처리합니다.

만약 유효성 검사에 실패한 경우에는 해당 질문의 세부 정보를 보여주는 페이지로 이동해야 합니다. 따라서 모델에는 해당 질문 객체가 포함되어야 합니다. 이렇게 함으로써 question_detail 템플릿에서는 모델을 통해 특정 질문의 정보를 사용할 수 있게 됩니다.

th:replace 속성을 사용하면 템플릿 내에 공통 템플릿을 삽입할 수 있다. <div th:replace="~{form_errors :: formErrorsFragment}"></div>는 th:replace 속성에 의해 div 요소의 내용을 form_errors 템플릿으로 대체하라는 의미이다. 여기서 formErrorsFragment는 앞서 form_errors 템플릿에서 작성한 내용 일부를 가리키는 것이다.

Thymeleaf에서 사용되는 ~{...} 문법은 템플릿 속성 파일을 참조하기 위한 것입니다. 이 문법을 사용하면 다른 파일에 정의된 템플릿 조각을 현재의 템플릿으로 가져올 수 있습니다.

예를 들어, 위의 코드에서 ~{form_errors :: formErrorsFragment}는 form_errors.html 파일에서 formErrorsFragment라는 템플릿 조각을 가져옵니다. 이를 현재 템플릿의 해당 위치에 삽입합니다.

