3-6.
User의 비밀번호는 보안을 위해 반드시 암호화하여 저장해야 한다. 그러므로 스프링 시큐리티의 BCryptPasswordEncoder 클래스를 사용하여 암호화하여 비밀번호를 저장했다.

BCryptPasswordEncoder 객체를 직접 new로 생성하는 방식보다는 PasswordEncoder 객체를 빈으로 등록해서 사용하는 것이 좋다. 왜냐하면 암호화 방식을 변경하면 BCryptPasswordEncoder를 사용한 모든 프로그램을 일일이 찾아다니며 수정해야 하기 때문이다.

@Email은 해당 속성의 값이 이메일 형식과 일치하는지를 검증한다.

bindingResult.rejectValue의 매개변수는 순서대로 각각 bindingResult.rejectValue(필드명, 오류 코드, 오류 메시지).

여기서 오류 코드는 임의로 passwordInCorrect로 정의했다. 하지만 대형 프로젝트에서는 번역과 관리를 위해 오류 코드를 잘 정의하여 사용해야 한다.

rejectValue() 메서드는 스프링 MVC의 BindingResult 객체에서 사용되는 메서드입니다. 이 메서드는 유효성 검사가 실패한 필드에 대한 오류를 추가합니다.

일반적으로 유효성 검사를 수행하는 폼에서 사용됩니다. 위의 코드에서는 사용자가 입력한 두 개의 패스워드가 서로 다른지 확인하는 유효성 검사를 수행하고 있습니다. 만약 두 패스워드가 다르다면, bindingResult.rejectValue() 메서드를 사용하여 password2 필드에 대한 오류 메시지를 추가합니다.

rejectValue() 메서드는 다음과 같은 인수를 받습니다:

첫 번째 인수: 오류가 발생한 필드의 이름을 지정합니다.
두 번째 인수: 오류 코드를 지정합니다. 이 코드는 메시지 소스에서 오류 메시지를 가져오는 데 사용됩니다.
세 번째 인수: 사용자에게 표시할 오류 메시지입니다.
따라서 위의 코드에서는 password2 필드에 대한 오류 메시지를 추가하여 사용자에게 두 개의 패스워드가 일치하지 않음을 알려줍니다.

DataIntegrityViolationException은 데이터베이스 관련 작업 중에 데이터 무결성 제약 조건을 위반했을 때 발생하는 예외입니다. 주로 다음과 같은 상황에서 발생할 수 있습니다:

1. 유일성 제약 조건(Unique Constraint) 위반: 데이터베이스에서 특정 열에 대해 고유한 값을 요구하는데, 이미 해당 값이 존재하는 경우 발생합니다. 이 경우에는 이미 등록된 사용자를 다시 등록하려고 할 때 발생할 수 있습니다.

2. 참조 무결성 제약 조건(Referential Integrity Constraint) 위반: 외래 키 제약이 존재하는 테이블에서 해당 키가 참조하는 행이 없는 경우 발생합니다. 이는 부모 테이블의 행을 삭제하려고 할 때 자식 테이블에 해당 행을 참조하는 데이터가 있는 경우에 발생할 수 있습니다.

주로 데이터베이스 관련 작업을 수행할 때, 데이터의 무결성을 유지하기 위해 이러한 예외를 처리하게 됩니다. 위 코드에서는 이미 등록된 사용자를 다시 등록하려고 할 때 이 예외가 발생하며, 사용자에게 이미 등록된 사용자임을 알려줍니다.

e.printStackTrace()는 예외가 발생했을 때 발생한 예외의 스택 트레이스(stack trace)를 표시하는 메서드입니다. 스택 트레이스는 예외가 발생한 지점부터 예외가 처리되는 지점까지의 호출 스택(call stack)을 보여줍니다. 이는 예외가 발생한 원인과 그에 대한 상세한 정보를 제공하여 디버깅을 돕습니다.

일반적으로 e.printStackTrace()는 예외 처리 과정에서 예외를 콘솔에 출력하는 데 사용됩니다. 따라서 개발자는 어떤 예외가 발생했는지, 그리고 어디서 발생했는지를 쉽게 파악할 수 있습니다. 하지만 프로덕션 환경에서는 사용자에게 디버깅 정보를 노출시키지 않기 위해 보통 사용되지 않습니다. 대신 로깅 시스템을 사용하여 예외 정보를 기록하고 관리합니다.

프로덕션 환경은 사용자들이 실제로 애플리케이션을 사용하는 환경을 의미합니다. 일반적으로 프로덕션 환경에서는 디버깅 정보나 내부 상태 정보를 사용자에게 노출시키지 않는 것이 좋습니다. 이는 보안 및 개인정보 보호 측면에서 중요하며, 또한 사용자 경험에도 영향을 미칠 수 있습니다.

예를 들어, e.printStackTrace()를 사용하여 예외 정보를 콘솔에 출력하는 경우, 이 정보는 사용자가 접근할 수 있는 로그나 출력으로 노출될 수 있습니다. 그러면 사용자는 내부적인 시스템 동작에 대한 정보를 얻게 되는데, 이는 보안 취약점을 노출시킬 수 있습니다. 또한 사용자는 이 정보를 이해하지 못하거나 당황할 수 있습니다.

따라서 프로덕션 환경에서는 예외 처리 시에는 사용자에게 디버깅 정보를 노출시키지 않도록 주의해야 합니다. 대신, 예외 정보를 적절한 로깅 시스템에 기록하고 필요한 경우 관리자 또는 개발자에게 알림을 보내는 것이 좋습니다.

"대신 로깅 시스템을 사용하여 예외 정보를 기록하고 관리합니다"는 예외가 발생했을 때, 예외 정보를 디버그 목적으로 콘솔에 직접 출력하는 것이 아니라, 로깅 라이브러리를 사용하여 해당 정보를 로그 파일이나 중앙 집중식 로그 서버에 기록하는 것을 의미합니다.

로깅 시스템은 애플리케이션에서 발생하는 다양한 이벤트를 기록하고 관리하는데 사용됩니다. 이는 디버깅 정보뿐만 아니라, 애플리케이션의 상태 정보, 사용자 활동 로그, 성능 지표 등 다양한 정보를 기록할 수 있습니다.

로깅 시스템을 사용하면 다음과 같은 이점이 있습니다:

보안: 로그는 보안에 민감한 정보를 포함할 수 있으므로, 로그 파일이나 로그 서버에만 저장하여 보안을 유지할 수 있습니다.
관리: 로그는 일반적으로 시간별, 일별, 이벤트 유형별로 관리되며, 필요에 따라 관리자 또는 개발자에게 알림을 보내는 등의 기능을 제공합니다.
분석: 로그를 분석하여 애플리케이션의 동작을 이해하고 성능을 향상시키는 데 도움이 됩니다.
모니터링: 로그를 모니터링하여 애플리케이션의 상태를 실시간으로 파악하고 문제가 발생하면 신속하게 대응할 수 있습니다.
따라서 예외 처리 시에는 e.printStackTrace() 대신 로깅 시스템을 사용하여 예외 정보를 기록하고 관리하는 것이 좋습니다.

bindingResult.reject(오류 코드, 오류 메시지)는 UserCreateForm의 검증에 의한 오류 외에 일반적인 오류를 발생시킬 때 사용한다.

@GetMapping("/login")을 통해 /user/login URL로 들어오는 GET 요청을 이 메서드가 처리한다. 즉, /user/login URL을 매핑했다. 그리고 매핑한 login 메서드는 login_form.html 템플릿을 출력하도록 만든다. 실제 로그인을 진행하는 @PostMapping 방식의 메서드는 스프링 시큐리티가 대신 처리하므로 우리가 직접 코드를 작성하여 구현할 필요가 없다.

3-7.

param은 Thymeleaf 템플릿 엔진에서 제공하는 객체 중 하나입니다. 이 객체는 HTTP 요청의 쿼리 문자열 또는 POST 요청의 폼 데이터를 나타냅니다.

${param.error}는 Thymeleaf 템플릿에서 사용되는 표현식입니다. 이는 현재 HTTP 요청에 error라는 이름의 쿼리 문자열 또는 POST 폼 데이터가 있는지 확인합니다. 예를 들어, URL에 ?error=true와 같은 쿼리 문자열이 포함되어 있다면 ${param.error}는 true를 반환하고, 그렇지 않으면 false를 반환합니다.

따라서 위 코드는 HTTP 요청에 error 파라미터가 있는 경우에만 사용자에게 오류 메시지를 보여줍니다. 이를 통해 사용자가 로그인 시도를 실패한 경우에만 해당 오류 메시지를 표시할 수 있습니다.





